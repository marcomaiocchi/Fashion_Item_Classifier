LINK TO REPL.IT -> https://repl.it/@MarcoMaiocchi/LiveTrendCategoryPrediction



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


df = pd.read_csv('the-kooples4.csv', encoding = "ISO-8859-1")
print(df.head())


'''
CHOOSE SAMPLES
'''

y = df['main_collection'] #select column you want to predict ('main_category', 'main_sub_category')
x = df.iloc[:, 18:] #take all columns from "cape" to the right as variables
x['price'] = df['price'] #add the price variable
print(y.shape)

'''
RANDOM FOREST MODEL (MORE ACCURATE SO FAR)
'''

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.25, random_state = 101)

from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators = 40)
forest.fit(x_train, y_train)

#predictions

pred = forest.predict(x_test)

#testing

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test, pred))
print(confusion_matrix(y_test, pred))


'''
SUPPORT VECTOR MACHINE MODEL WITH GRID() TO FIT PARAMETERS (GOOD)


from sklearn.svm import SVC
model = SVC()

from sklearn.model_selection import GridSearchCV

param_grid = {'C': [800, 1000,5000], 'gamma': [0.005, 0.001,0.0005]}

grid = GridSearchCV(SVC(), param_grid, verbose = 3)

grid.fit(x_train, y_train) 

print(grid.best_params_) 

pred = grid.predict(x_test)

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test, pred))
print(confusion_matrix(y_test, pred))
'''

'''
KNN MODEL (POOR)


from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 2)
knn.fit(x_train, y_train)

pred = knn.predict(x_test)

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y_test, pred))
print(confusion_matrix(y_test, pred))
'''

'''
CLUSTER MODEL (VERY POOR)

df = df['id'] #select column you want to predict
from sklearn.cluster import KMeans

km = KMeans(n_clusters = 20)
km.fit(x) 
pred = km.labels_
print(pred)

from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(df, pred))
print(confusion_matrix(df, pred))
'''

'''
PCA model + visual representation of the components of the main collection + KMeans Clustering (VERY POOR)

#data normalization
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(x)
scaled_data = scaler.transform(x)

#principal component analysis
from sklearn.decomposition import PCA
pca = PCA(n_components = 2) 
pca.fit(scaled_data)
x_pca = pca.transform(scaled_data)

df_comp = pd.DataFrame(pca.components_)

def converter(private):
  if private == 'PAP':
    return 0
  else:
    return 1

df['id_2'] = df['main_collection'].apply(converter)

plt.figure(figsize = (20,12))
plt.scatter(x_pca[:,0], x_pca[:,1], c = df['id_2'], cmap = 'plasma') #id_2 refers to the main collection
plt.xlabel = 'First Principal Component'
plt.ylabel = 'Second Principal Component'
plt.savefig('1.png')


#Kmeans Cluster
from sklearn.cluster import KMeans
km = KMeans(n_clusters = 2)
km.fit(x)
predictions = km.labels_
print(predictions)

y = df['id_2']
from sklearn.metrics import classification_report, confusion_matrix
print(classification_report(y, predictions))
print(confusion_matrix(y, predictions))

'''
